generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  passwordHash String  @map("password_hash")
  fullName    String   @map("full_name")
  nic         String   @unique
  mobile      String?
  dateOfBirth DateTime? @map("date_of_birth")
  address     String?
  role        Role     @default(CITIZEN)
  departmentId String? @map("department_id")
  department   Department? @relation(fields: [departmentId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  isActive    Boolean  @default(true) @map("is_active")

  // Relations
  appointments Appointment[]
  documents   Document[]
  feedback    Feedback[]
  supportTickets SupportTicket[]
  notifications Notification[]
  
  // For officer assignments
  assignedAppointments Appointment[] @relation("OfficerAppointments")

  @@map("users")
}

model Department {
  id          String   @id @default(uuid())
  name        String   @unique
  code        String   @unique
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  services    Service[]
  users       User[]

  @@map("departments")
}

model Service {
  id           String     @id @default(uuid())
  departmentId String     @map("department_id")
  department   Department @relation(fields: [departmentId], references: [id])
  name         String
  code         String     @unique
  description  String?
  fee          Float
  processingDays Int      @map("processing_days")
  requiredDocuments Json @map("required_documents")
  isActive     Boolean    @default(true) @map("is_active")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  appointments Appointment[]

  @@map("services")
}

model Appointment {
  id              String            @id @default(uuid())
  userId          String            @map("user_id")
  user            User              @relation(fields: [userId], references: [id])
  serviceId       String            @map("service_id")
  service         Service           @relation(fields: [serviceId], references: [id])
  appointmentNumber String          @unique @map("appointment_number")
  appointmentDate DateTime          @map("appointment_date")
  appointmentTime String            @map("appointment_time")
  officeLocation  String            @map("office_location")
  status          AppointmentStatus @default(SCHEDULED)
  notes           String?
  officerId       String?           @map("officer_id")
  officer         User?             @relation("OfficerAppointments", fields: [officerId], references: [id])
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")

  // Relations
  documents       Document[]
  feedback        Feedback?
  statusHistory   AppointmentStatusHistory[]
  notifications   Notification[]

  @@map("appointments")
}

model Document {
  id               String     @id @default(uuid())
  appointmentId    String     @map("appointment_id")
  appointment      Appointment @relation(fields: [appointmentId], references: [id])
  userId           String     @map("user_id")
  user             User       @relation(fields: [userId], references: [id])
  documentType     String     @map("document_type")
  originalName     String     @map("original_name")
  filePath         String?    @map("file_path")
  fileSize         Int?       @map("file_size")
  mimeType         String?    @map("mime_type")
  status           DocumentStatus @default(PENDING)
  verificationNotes String?   @map("verification_notes")
  uploadedAt       DateTime   @default(now()) @map("uploaded_at")
  verifiedAt       DateTime?  @map("verified_at")

  @@map("documents")
}

model Feedback {
  id            String      @id @default(uuid())
  appointmentId String      @unique @map("appointment_id")
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  userId        String      @map("user_id")
  user          User        @relation(fields: [userId], references: [id])
  rating        Int         // 1-5 stars
  comment       String?
  createdAt     DateTime    @default(now()) @map("created_at")

  @@map("feedback")
}

model SupportTicket {
  id        String            @id @default(uuid())
  userId    String            @map("user_id")
  user      User              @relation(fields: [userId], references: [id])
  subject   String
  message   String
  priority  TicketPriority    @default(MEDIUM)
  category  String?
  status    TicketStatus      @default(OPEN)
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")

  @@map("support_tickets")
}

model AppointmentStatusHistory {
  id            String      @id @default(uuid())
  appointmentId String      @map("appointment_id")
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  previousStatus AppointmentStatus? @map("previous_status")
  newStatus     AppointmentStatus  @map("new_status")
  changedBy     String?     @map("changed_by")
  notes         String?
  createdAt     DateTime    @default(now()) @map("created_at")

  @@map("appointment_status_history")
}

model Notification {
  id            String           @id @default(uuid())
  userId        String           @map("user_id")
  user          User             @relation(fields: [userId], references: [id])
  appointmentId String?          @map("appointment_id")
  appointment   Appointment?     @relation(fields: [appointmentId], references: [id])
  type          NotificationType
  title         String
  message       String
  isRead        Boolean          @default(false) @map("is_read")
  sentAt        DateTime         @default(now()) @map("sent_at")

  @@map("notifications")
}

// Enums
enum Role {
  CITIZEN
  OFFICER
  ADMIN
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  REQUIRES_INFO
}

enum DocumentStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum NotificationType {
  APPOINTMENT_CONFIRMATION
  APPOINTMENT_REMINDER
  STATUS_UPDATE
  DOCUMENT_VERIFICATION
  GENERAL
}
